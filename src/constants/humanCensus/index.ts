import { getRelationshipTypesObjects } from "src/utils/humanCensus";

/* eslint-disable max-lines */
export const emptySimpleCensusFormat = {
  name: "",
  sheet_name: "",
  data_start_row: 2,
  data_end_row: -1,
  relationship_column: "",
  relationship_employee: "",
  relationship_spouse: "Spouse",
  relationship_child: "Child",
  coverage_column: "",
  coverage_ee: "EE",
  coverage_es: "ES",
  coverage_ec: "EC",
  coverage_ef: "EF",
  coverage_waived: "W*",
  postal_column: "",
  birthday_column: "",
  gender_column: "",
  first_name_column_ee: "",
  last_name_column_ee: "",
  first_name_column_dep: "",
  last_name_column_dep: "",
  plan_column: "",
};

export const allayInternalSimpleCensusFormat = {
  name: "Novo Simple Census'",
  sheet_name: "",
  data_start_row: 2,
  data_end_row: -1,
  relationship_column: "",
  relationship_employee: "",
  relationship_spouse: "Spouse",
  relationship_child: "Child",
  coverage_column: "A",
  coverage_ee: "EE, Employee",
  coverage_es: "ES, Employee & Spouse, Employee and Spouse, spouse",
  coverage_ec: "EC, Employee & Children, Employee and Children,  children",
  coverage_ef: "EF, Employee & Family, Employee and Family, family",
  coverage_waived: "W*",
  postal_column: "B",
  birthday_column: "C",
  gender_column: "D",
  first_name_column_ee: "E",
  last_name_column_ee: "F",
  first_name_column_dep: "I",
  last_name_column_dep: "J",
  plan_column: "H",
};

const genderObjects = [
  {
    name: "Male",
    code: "M",
    id: "02361424-0a82-4f28-855d-a86983578a49",
  },
  {
    name: "Female",
    code: "F",
    id: "a344a913-dc17-4887-8a60-4e97a1889eca",
  },
];

const maritalStatusChoiceObjects = [
  {
    name: "Single",
    code: "S",
    id: "8840b562-a8cc-4675-855e-7587ab0baa1b",
  },
  {
    name: "Married",
    code: "M",
    id: "fad7ab99-611b-434f-b99c-dafa20ad6d6e",
  },
  {
    name: "Common Law",
    code: "C",
    id: "00756c10-479d-49ae-abb1-4323ff0cc892",
  },
];

export const fieldSet = {
  first_name: {
    id: "02361424-0a82-4f28-855d-a86983578a49",
    name: "First Name",
    description: "",
    editor_description: "",
    mapping: "first_name",
    list_order: -50.0,
    response_type: "TX",
    editor_name: "First Name",
    field_attributes: {},
    internal: false,
    default_owner: "OA",
    question: "<p>What is their <strong>first name</strong>?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
  },
  last_name: {
    id: "a344a913-dc17-4887-8a60-4e97a1889eca",
    name: "Last Name",
    description: "",
    editor_description: "",
    mapping: "last_name",
    list_order: -49.0,
    response_type: "TX",
    editor_name: "Last Name",
    field_attributes: {},
    internal: false,
    default_owner: "OA",
    question: "<p>What is their <strong>last name</strong>?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
  },
  email: {
    id: "bf1cf67f-9a39-4d60-b79c-7fa70ed34f60",
    name: "Email",
    description: "",
    editor_description: "",
    mapping: "email",
    list_order: -20.0,
    response_type: "EM",
    editor_name: "Email",
    field_attributes: {},
    internal: false,
    default_owner: "OA",
    question: "<p>What is {name}'s <strong>email</strong>?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
  },
  personal_email: {
    id: "13f6ef1c-e5d3-4ec6-9320-aa9d78351afb",
    name: "Email",
    description: "",
    editor_description: "",
    mapping: "personal_email",
    list_order: -20.0,
    response_type: "EM",
    editor_name: "Email",
    field_attributes: {},
    internal: false,
    default_owner: "OA",
    question: "<p>What is {name}'s <strong>personal email</strong>?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
  },
  // government_number: {
  //     "id": "9a9b5f6e-d4eb-4cad-a697-889abee524c3",
  //     "name": "Social Security Number",
  //     "description": "",
  //     "editor_description": "",
  //     "mapping": "government_number",
  //     "list_order": -5.0,
  //     "response_type": "GN",
  //     "editor_name": "Social Security Number",
  //     "field_attributes": {},
  //     "internal": false,
  //     "default_owner": "WK",
  //     "question": "<p>What is {name}'s <strong>social security number</strong>?</p>",
  //     "image": null,
  //     "conditional_mapping": "",
  //     "conditional_compare": "",
  //     "conditional_type": "=",
  //     "placeholder": ""
  // },
  gender: {
    id: "72dee95f-5cda-49bb-a810-bafae652e401",
    name: "Gender",
    description: "",
    editor_description: "",
    mapping: "gender",
    list_order: -2.0,
    response_type: "CH",
    editor_name: "Gender",
    field_attributes: {},
    internal: false,
    default_owner: "WK",
    question: "<p>What is {name}'s <strong>gender</strong>?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
    choices: genderObjects,
    display_code: true,
  },
  marital_status: {
    id: "6131001d-639c-4014-8bca-0792ec2aaf6a",
    name: "Marital Status",
    description: "",
    editor_description: "",
    mapping: "marital_status",
    list_order: -1.1,
    response_type: "CH",
    editor_name: "Marital Status",
    field_attributes: {},
    internal: false,
    default_owner: "WK",
    question: "<p>What is {name}'s <strong>marital status</strong>?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
    choices: maritalStatusChoiceObjects,
  },
  birthday: {
    id: "ccabbbb1-fbd5-4f0a-84b7-1fe933af49c6",
    name: "Date of Birth",
    description: "",
    editor_description: "",
    mapping: "birthday",
    list_order: 0.0,
    response_type: "DA",
    editor_name: "Date of Birth",
    field_attributes: {
      min_mod: "-80y",
      max_mod: "0y",
    },
    internal: false,
    default_owner: "WK",
    question: "<p>What is {name}'s <strong>date of birth</strong>?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
  },
  address: {
    id: "eb2219e7-8fe7-4bcc-8937-ae05887b1df5",
    name: "Street Address",
    description: "",
    editor_description: "",
    mapping: "address",
    list_order: -10.0,
    response_type: "TX",
    editor_name: "Street Address",
    field_attributes: {},
    internal: false,
    default_owner: "WK",
    question: "<p>What is {name}'s <strong>street address</strong>?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
  },
  postal: {
    id: "8b56f298-fc73-4ee1-b638-7bc5c833a562",
    name: "ZIP Code",
    description: "",
    editor_description: "",
    mapping: "postal",
    list_order: -7.0,
    response_type: "PO",
    editor_name: "ZIP Code",
    field_attributes: {},
    internal: false,
    default_owner: "WK",
    question: "<p>What is {name}'s <strong>zip code</strong>?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
  },
  phone: {
    id: "1bf2bcda-ca69-41a9-bc2b-0cb2103e0a4b",
    name: "Phone",
    description: "",
    editor_description: "",
    mapping: "phone",
    list_order: 100.0,
    response_type: "PH",
    editor_name: "Phone",
    field_attributes: {},
    internal: false,
    default_owner: "WK",
    question: "<p>What is {name}'s <strong>phone number</strong>?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
  },
  country: {
    id: "8840b562-a8cc-4675-855e-7587ab0baa1b",
    name: "Country",
    description: "",
    editor_description: "",
    mapping: "country",
    list_order: -9.0,
    response_type: "CT",
    editor_name: "Country",
    field_attributes: {},
    internal: false,
    default_owner: "WK",
    question: "<p>What <strong>country</strong> does {name} live in?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
  },
  region: {
    id: "fad7ab99-611b-434f-b99c-dafa20ad6d6e",
    name: "State",
    description: "",
    editor_description: "",
    mapping: "region",
    list_order: -8.5,
    response_type: "RG",
    editor_name: "State",
    field_attributes: {},
    internal: false,
    default_owner: "WK",
    question: "<p>What <strong>state</strong> does {name} live in?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
    dependencies: ["country"],
  },
  city: {
    id: "00756c10-479d-49ae-abb1-4323ff0cc892",
    name: "City",
    description: "",
    editor_description: "",
    mapping: "city",
    list_order: -8.0,
    response_type: "CY",
    editor_name: "City",
    field_attributes: {},
    internal: false,
    default_owner: "WK",
    question: "<p>What <strong>city</strong> does {name} live in?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
    dependencies: ["region"],
  },
  relationship: {
    id: "72dee95f-5cda-49bb-a810-bafae652e401",
    name: "Relationship",
    description: "",
    editor_description: "",
    mapping: "relationship",
    list_order: -2.0,
    response_type: "CH",
    editor_name: "Relationship",
    field_attributes: {},
    internal: false,
    default_owner: "WK",
    question: "<p>What is {name}'s <strong>relationship</strong>?</p>",
    image: null,
    conditional_mapping: "",
    conditional_compare: "",
    conditional_type: "=",
    placeholder: "",
    choices: getRelationshipTypesObjects("dependent"),
  },
};

export const levelOfCoverageChoices = [
  {
    name: "Employee",
    code: "employee",
  },
  {
    name: "Employee & Spouse",
    code: "employee_spouse",
  },
  {
    name: "Employee & Children",
    code: "employee_children",
  },
  {
    name: "Employee & Family",
    code: "employee_family",
  },
];

export const levelOfCoverageChoicesFull = levelOfCoverageChoices.concat([
  {
    name: "Waived",
    code: "waived",
  },
]);

export const levelOfCoverageField = {
  id: "ee827a61-159e-4a40-9eb6-33f2cbde49b2",
  name: "Coverage",
  mapping: "coverage_type",
  response_type: "CH",
  field_attributes: {},
  default_owner: "OA",
  question: "",
  conditional_mapping: "",
  conditional_compare: "",
  conditional_type: "=",
  placeholder: "",
  choices: levelOfCoverageChoicesFull,
  value_code: true,
};

const relationshipChoices = [
  {
    name: "Spouse",
    code: "spouse",
  },
  {
    name: "Child",
    code: "child",
  },
];

const relationshipField = {
  id: "relationship_field",
  name: "Relationship",
  mapping: "relationship",
  response_type: "CH",
  field_attributes: {},
  default_owner: "OA",
  question: "",
  conditional_mapping: "",
  conditional_compare: "",
  conditional_type: "=",
  placeholder: "",
  choices: relationshipChoices,
  value_code: true,
};

const employeeField = {
  id: "employee_field",
  name: "Employee",
  mapping: "employee",
  response_type: "CH",
  field_attributes: {},
  default_owner: "OA",
  question: "",
  conditional_mapping: "",
  conditional_compare: "",
  conditional_type: "=",
  placeholder: "",
  choices: [],
  value_code: true,
};

const planNameField = {
  id: "plan_name_field",
  name: "Plan Name",
  mapping: "plan_name",
  response_type: "TX",
  field_attributes: {},
  default_owner: "OA",
  question: "",
  conditional_mapping: "",
  conditional_compare: "",
  conditional_type: "=",
  placeholder: "",
};

export const fieldsMap = {
  coverage_type: levelOfCoverageField,
  postal: fieldSet["postal"],
  birthday: fieldSet["birthday"],
  gender: fieldSet["gender"],
  first_name: fieldSet["first_name"],
  last_name: fieldSet["last_name"],
  relationship: relationshipField,
  employee: employeeField,
  plan_name: planNameField,
};

export const simpleCensusFields: any = [
  fieldsMap["coverage_type"],
  fieldsMap["postal"],
  fieldsMap["birthday"],
  fieldsMap["gender"],
];

export const fullCensusFields = simpleCensusFields.concat([
  fieldsMap["first_name"],
  fieldsMap["last_name"],
  fieldsMap["relationship"],
  fieldsMap["plan_name"],
]);

export const participationMappings = [
  "participation_estimation_employee",
  "participation_estimation_employee_spouse",
  "participation_estimation_employee_child",
  "participation_estimation_employee_family",
];
